@page
@model IndexPageModel

@using AutoMapper

@inject IMapper mapper

@{
    ViewData["Title"] = "Discover Amphora";
}

<div class="container">
    <h2 class="display-4">Discover</h2>
    <div class="row">
        <div class="col-6">
            <nav class="nav nav-pills nav-justified">
                <a class="nav-item nav-link active" asp-page="../Index">Amphora</a>
                <a class="nav-item nav-link" asp-page="./DataRequests/Index">Data Requests</a>
            </nav>
        </div>
        <div class="col-6 text-right">
            @if(Model.MapView)
            {
                <a class="btn btn-link" asp-page="./Index" asp-page-handler="ListView"
                    asp-route-SearchDefinition.Term="@Model.SearchDefinition.Term" 
                    asp-route-SearchDefinition.Page="@Model.SearchDefinition.Page" 
                    asp-route-SearchDefinition.Skip="@Model.SearchDefinition.Skip" 
                    asp-route-SearchDefinition.Top="@Model.SearchDefinition.Top" 
                    asp-route-SearchDefinition.Lat="@Model.SearchDefinition.Lat" 
                    asp-route-SearchDefinition.Lon="@Model.SearchDefinition.Lon" 
                    asp-route-SearchDefinition.Dist="@Model.SearchDefinition.Dist"
                    asp-route-SearchDefinition.Labels="@Model.SearchDefinition.Labels"  >
                    View as List
                </a>
            }
            else
            {
                <a class="btn btn-link" asp-page="./Index" asp-page-handler="MapView"
                    asp-route-SearchDefinition.Term="@Model.SearchDefinition.Term" 
                    asp-route-SearchDefinition.Page="@Model.SearchDefinition.Page" 
                    asp-route-SearchDefinition.Skip="@Model.SearchDefinition.Skip" 
                    asp-route-SearchDefinition.Top="@Model.SearchDefinition.Top" 
                    asp-route-SearchDefinition.Lat="@Model.SearchDefinition.Lat" 
                    asp-route-SearchDefinition.Lon="@Model.SearchDefinition.Lon" 
                    asp-route-SearchDefinition.Dist="@Model.SearchDefinition.Dist"
                    asp-route-SearchDefinition.Labels="@Model.SearchDefinition.Labels"  >
                    View on Map
                </a>
            }
        </div>
    </div>
    <div class="row">
       <div class="col">
           <hr/>
       </div>
    </div>
    <div class="row align-items-center">
        <div class="col-11 text-center">
            @await Component.InvokeAsync("SearchBar", new {searchDefinition=Model.SearchDefinition, formId="searchform", handler=Model.Handler})
        </div>
        <div class="col-1 text-left">
            <div>
                <a data-toggle="collapse" href="#filterCollapse" role="button" aria-expanded="false" aria-controls="collapseAdvanced">
                    <i class="fas fa-filter fa-2x"></i>
                </a>
            </div>
        </div>
    </div>
    <div class="row">
        <div id="advanced" class="col text-center">
            <div id="filterCollapse" class="collapse mb-2">
                @await Component.InvokeAsync("SearchBar", new {searchDefinition=Model.SearchDefinition, labelFacets=Model.LabelFacets, handler=Model.Handler, isAdvanced=true, formId="searchform", })
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm">
            @if(Model.MapView)
            {
                <div class="w-100" id="discoverMap"></div>
            }
            else
            {
                var index = 0;
                <div>
                    <table id="market-table" class="table table-borderless table-striped">
                        <tbody>
                        @if(Model.Entities?.Count() == 0)
                        {
                            <td class="text-center">
                                No Results
                            </td>
                        }
                        @foreach (var entity in Model.Entities)
                        {
                            @await Component.InvokeAsync("AmphoraRow", new {amphora = entity, isTable = true, index = index++})
                        }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>

    <div class="row">
        <div class="col text-center">
            <a asp-page="/DataRequests/Create" class="btn btn-link">I can't find what I'm looking for</a>
        </div>
    </div>

    @{
        var d = Model.SearchDefinition;
        // skip is zero based
        int numPages = (int)(Model.Count / d.Top) + 1;
        int currentPage = (int)d.Page;
        var previousPage = d.Page - 1;
        var nextPage = d.Page + 2;
        var startPage = Math.Max(0, currentPage - 3);
        var endPage = Math.Min(numPages, currentPage + 3);
        string nextEnabled = "";
        string previousEnabled = "";
        if(nextPage > numPages) nextEnabled = "disabled";
        if(previousPage < 1) previousEnabled = "disabled";
    }
    <div class="row">
        <div class="col text-center">
            <hr/>
            <p> Page @currentPage of @(numPages - 1)</p>
            <nav aria-label="...">
                <ul class="pagination justify-content-center">
                    <li class="page-item @previousEnabled">
                        <a class="page-link" asp-area="Discover" asp-page="/Index" 
                            asp-page-handler="@Model.Handler"
                            asp-route-SearchDefinition.Term="@Model.SearchDefinition.Term" 
                            asp-route-SearchDefinition.Page="0"
                            asp-route-SearchDefinition.Skip="@Model.SearchDefinition.Skip" 
                            asp-route-SearchDefinition.Top="@Model.SearchDefinition.Top" 
                            asp-route-SearchDefinition.Lat="@Model.SearchDefinition.Lat" 
                            asp-route-SearchDefinition.Lon="@Model.SearchDefinition.Lon" 
                            asp-route-SearchDefinition.Dist="@Model.SearchDefinition.Dist"
                            asp-route-SearchDefinition.Labels="@Model.SearchDefinition.Labels" 
                            tabindex="-1">
                            <<
                        </a>
                    </li>
                    <li class="page-item @previousEnabled">
                        <a class="page-link" asp-area="Discover" asp-page="/Index" 
                            asp-page-handler="@Model.Handler"
                            asp-route-SearchDefinition.Term="@Model.SearchDefinition.Term" 
                            asp-route-SearchDefinition.Page="@previousPage"
                            asp-route-SearchDefinition.Skip="@Model.SearchDefinition.Skip" 
                            asp-route-SearchDefinition.Top="@Model.SearchDefinition.Top" 
                            asp-route-SearchDefinition.Lat="@Model.SearchDefinition.Lat" 
                            asp-route-SearchDefinition.Lon="@Model.SearchDefinition.Lon" 
                            asp-route-SearchDefinition.Dist="@Model.SearchDefinition.Dist"
                            asp-route-SearchDefinition.Labels="@Model.SearchDefinition.Labels" 
                            tabindex="-1">
                            <
                        </a>
                    </li>
                    @for(var p = startPage; p < endPage; p++)
                    {
                        var active = "";
                        if(p == currentPage) active = "active";
                        <li class="page-item @active">
                            <a class="page-link" asp-area="Discover" asp-page="/Index" 
                                asp-page-handler="@Model.Handler"
                                asp-route-SearchDefinition.Term="@Model.SearchDefinition.Term" 
                                asp-route-SearchDefinition.Page="@p" 
                                asp-route-SearchDefinition.Skip="@Model.SearchDefinition.Skip" 
                                asp-route-SearchDefinition.Top="@Model.SearchDefinition.Top" 
                                asp-route-SearchDefinition.Lat="@Model.SearchDefinition.Lat" 
                                asp-route-SearchDefinition.Lon="@Model.SearchDefinition.Lon" 
                                asp-route-SearchDefinition.Dist="@Model.SearchDefinition.Dist"
                                asp-route-SearchDefinition.Labels="@Model.SearchDefinition.Labels" >
                                @p
                            </a>
                        </li>
                    }
                    <li class="page-item @nextEnabled">
                        <a class="page-link" asp-area="Discover" asp-page="/Index"
                            asp-page-handler="@Model.Handler"
                            asp-route-SearchDefinition.Term="@Model.SearchDefinition.Term" 
                            asp-route-SearchDefinition.Page="@nextPage"
                            asp-route-SearchDefinition.Skip="@Model.SearchDefinition.Skip" 
                            asp-route-SearchDefinition.Top="@Model.SearchDefinition.Top" 
                            asp-route-SearchDefinition.Lat="@Model.SearchDefinition.Lat" 
                            asp-route-SearchDefinition.Lon="@Model.SearchDefinition.Lon" 
                            asp-route-SearchDefinition.Dist="@Model.SearchDefinition.Dist"
                            asp-route-SearchDefinition.Labels="@Model.SearchDefinition.Labels"  >
                        >
                        </a>
                    </li>
                    <li class="page-item @nextEnabled">
                        <a class="page-link" asp-area="Discover" asp-page="/Index"
                            asp-page-handler="@Model.Handler"
                            asp-route-SearchDefinition.Term="@Model.SearchDefinition.Term" 
                            asp-route-SearchDefinition.Page="@(numPages -1)"
                            asp-route-SearchDefinition.Skip="@Model.SearchDefinition.Skip" 
                            asp-route-SearchDefinition.Top="@Model.SearchDefinition.Top" 
                            asp-route-SearchDefinition.Lat="@Model.SearchDefinition.Lat" 
                            asp-route-SearchDefinition.Lon="@Model.SearchDefinition.Lon" 
                            asp-route-SearchDefinition.Dist="@Model.SearchDefinition.Dist"
                            asp-route-SearchDefinition.Labels="@Model.SearchDefinition.Labels"  >
                        >>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/lib/azure-maps-control/dist/atlas.min.css" type="text/css"> 
    <style>
        #discoverMap {
            height: 50vh;
        }
    </style>
}

@section Scripts {
    <partial name="_AutocompleteImportPartial" />
    <script>
        $('.dropdown-toggle').dropdown()
    </script>
    <script src="~/js/geo.js"></script>
    <script>
        const url = '/Market/LocationSearch';
        autocompleteGeoSearch(null, url, "#lat", "#lon")
    </script>
    <script>
        function onFacetLabelClicked(label) {
            var labelWithComma = label + ",";
            var currrentValue = document.getElementById("labels").value;
            if(currrentValue.includes(labelWithComma))
            {
                document.getElementById("labels").value = currrentValue.replace(labelWithComma, '');
            }
            else
            {
                document.getElementById("labels").value += labelWithComma; 
            }
        }
    </script>
    @{
        var lat = Model.MapCenter?.Lat() ?? 0;
        var lon = Model.MapCenter?.Lon() ?? 0;
        var zoom = Model.Zoom ;
    }
        <script src="~/lib/azure-maps-control/dist/atlas.min.js"></script>
        <script type="text/javascript">
            if(document.getElementById('discoverMap'))
            {
                let center = [@lon, @lat];
                var map = new atlas.Map('discoverMap', {
                    center,
                    view: "Auto",
                    zoom: @zoom,
                    language: 'en-AU',
                    authOptions: {
                        authType: 'subscriptionKey',
                        subscriptionKey: '@Model.MapKey'
                    }
                });
                //Construct a zoom control and add it to the map.
                map.controls.add(new atlas.control.ZoomControl(), {
                    position: 'bottom-right'
                });
                //Wait until the map resources are ready.
                map.events.add('ready', function () {
                    /*Construct a style control*/
                    var styleControl = new atlas.control.StyleControl({
                        mapStyles: ['road', 'grayscale_dark', 'road_shaded_relief'] // 'satellite' is not available in S0 maps SKU
                    });
                    
                    /*Add the Style Control to the map*/
                    map.controls.add(styleControl, {
                        position: "top-right"
                    })  
                });
                
                var entities = @Html.Raw(@Newtonsoft.Json.JsonConvert.SerializeObject(mapper.Map<List<Models.Dtos.Amphorae.DetailedAmphora>>(Model.Entities)));
                console.log(entities);
                entities.forEach((e) => {
                    if(e.Lat && e.Lon)
                    {
                        let lon = e.Lon;
                        let lat = e.Lat;
                        let nameLength = Math.min(30, e.Name.length );
                        let descLength = Math.min(50, e.Description.length );
                        let contentString = `
                        <div class="p-2 text-wrap">
                            <h5>${e.Name.substring(0, nameLength)}</h5>
                            <hr/>
                            <p>${e.Description.substring(0, descLength)}</p>
                            <a class="btn btn-link" href="Amphorae/Detail?id=${e.Id}">View</a>
                        </div>
                        `

                        //Create a HTML marker and add it to the map.
                        let marker = new atlas.HtmlMarker({
                            color: '#18171790',
                            text: "🏺",
                            position: [lon, lat],
                            popup: new atlas.Popup({
                                content: contentString,
                                pixelOffset: [0, 0]
                            })
                        });

                        map.markers.add(marker);
                        //Add a click event to toggle the popup.
                        map.events.add('click', marker, () => {
                            marker.togglePopup();
                        });
                    }
                });
            }
        </script>
}
