# coding: utf-8

"""
    AmphoraApi

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Schema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'json_schema': 'str',
        'j_schema': 'JSchema',
        'id': 'str'
    }

    attribute_map = {
        'json_schema': 'jsonSchema',
        'j_schema': 'jSchema',
        'id': 'id'
    }

    def __init__(self, json_schema=None, j_schema=None, id=None):  # noqa: E501
        """Schema - a model defined in OpenAPI"""  # noqa: E501

        self._json_schema = None
        self._j_schema = None
        self._id = None
        self.discriminator = None

        if json_schema is not None:
            self.json_schema = json_schema
        if j_schema is not None:
            self.j_schema = j_schema
        if id is not None:
            self.id = id

    @property
    def json_schema(self):
        """Gets the json_schema of this Schema.  # noqa: E501


        :return: The json_schema of this Schema.  # noqa: E501
        :rtype: str
        """
        return self._json_schema

    @json_schema.setter
    def json_schema(self, json_schema):
        """Sets the json_schema of this Schema.


        :param json_schema: The json_schema of this Schema.  # noqa: E501
        :type: str
        """

        self._json_schema = json_schema

    @property
    def j_schema(self):
        """Gets the j_schema of this Schema.  # noqa: E501


        :return: The j_schema of this Schema.  # noqa: E501
        :rtype: JSchema
        """
        return self._j_schema

    @j_schema.setter
    def j_schema(self, j_schema):
        """Sets the j_schema of this Schema.


        :param j_schema: The j_schema of this Schema.  # noqa: E501
        :type: JSchema
        """

        self._j_schema = j_schema

    @property
    def id(self):
        """Gets the id of this Schema.  # noqa: E501


        :return: The id of this Schema.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Schema.


        :param id: The id of this Schema.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Schema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
