# coding: utf-8

"""
    AmphoraApi

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class JSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'schema_version': 'str',
        'valid': 'bool',
        'reference': 'str',
        'id': 'str',
        'type': 'int',
        'default': 'object',
        'properties': 'dict(str, JSchema)',
        'items': 'list[JSchema]',
        'items_position_validation': 'bool',
        'required': 'list[str]',
        'all_of': 'list[JSchema]',
        'any_of': 'list[JSchema]',
        'one_of': 'list[JSchema]',
        '_if': 'JSchema',
        'then': 'JSchema',
        '_else': 'JSchema',
        '_not': 'JSchema',
        'contains': 'JSchema',
        'property_names': 'JSchema',
        'enum': 'list[object]',
        'const': 'object',
        'unique_items': 'bool',
        'minimum_length': 'int',
        'maximum_length': 'int',
        'minimum': 'float',
        'maximum': 'float',
        'exclusive_minimum': 'bool',
        'exclusive_maximum': 'bool',
        'minimum_items': 'int',
        'maximum_items': 'int',
        'minimum_properties': 'int',
        'maximum_properties': 'int',
        'content_encoding': 'str',
        'content_media_type': 'str',
        'write_only': 'bool',
        'read_only': 'bool',
        'extension_data': 'dict(str, object)',
        'title': 'str',
        'description': 'str',
        'multiple_of': 'float',
        'pattern': 'str',
        'dependencies': 'dict(str, object)',
        'additional_properties': 'JSchema',
        'pattern_properties': 'dict(str, JSchema)',
        'allow_additional_properties': 'bool',
        'additional_items': 'JSchema',
        'allow_additional_items': 'bool',
        'format': 'str',
        'validators': 'list[object]'
    }

    attribute_map = {
        'schema_version': 'schemaVersion',
        'valid': 'valid',
        'reference': 'reference',
        'id': 'id',
        'type': 'type',
        'default': 'default',
        'properties': 'properties',
        'items': 'items',
        'items_position_validation': 'itemsPositionValidation',
        'required': 'required',
        'all_of': 'allOf',
        'any_of': 'anyOf',
        'one_of': 'oneOf',
        '_if': 'if',
        'then': 'then',
        '_else': 'else',
        '_not': 'not',
        'contains': 'contains',
        'property_names': 'propertyNames',
        'enum': 'enum',
        'const': 'const',
        'unique_items': 'uniqueItems',
        'minimum_length': 'minimumLength',
        'maximum_length': 'maximumLength',
        'minimum': 'minimum',
        'maximum': 'maximum',
        'exclusive_minimum': 'exclusiveMinimum',
        'exclusive_maximum': 'exclusiveMaximum',
        'minimum_items': 'minimumItems',
        'maximum_items': 'maximumItems',
        'minimum_properties': 'minimumProperties',
        'maximum_properties': 'maximumProperties',
        'content_encoding': 'contentEncoding',
        'content_media_type': 'contentMediaType',
        'write_only': 'writeOnly',
        'read_only': 'readOnly',
        'extension_data': 'extensionData',
        'title': 'title',
        'description': 'description',
        'multiple_of': 'multipleOf',
        'pattern': 'pattern',
        'dependencies': 'dependencies',
        'additional_properties': 'additionalProperties',
        'pattern_properties': 'patternProperties',
        'allow_additional_properties': 'allowAdditionalProperties',
        'additional_items': 'additionalItems',
        'allow_additional_items': 'allowAdditionalItems',
        'format': 'format',
        'validators': 'validators'
    }

    def __init__(self, schema_version=None, valid=None, reference=None, id=None, type=None, default=None, properties=None, items=None, items_position_validation=None, required=None, all_of=None, any_of=None, one_of=None, _if=None, then=None, _else=None, _not=None, contains=None, property_names=None, enum=None, const=None, unique_items=None, minimum_length=None, maximum_length=None, minimum=None, maximum=None, exclusive_minimum=None, exclusive_maximum=None, minimum_items=None, maximum_items=None, minimum_properties=None, maximum_properties=None, content_encoding=None, content_media_type=None, write_only=None, read_only=None, extension_data=None, title=None, description=None, multiple_of=None, pattern=None, dependencies=None, additional_properties=None, pattern_properties=None, allow_additional_properties=None, additional_items=None, allow_additional_items=None, format=None, validators=None):  # noqa: E501
        """JSchema - a model defined in OpenAPI"""  # noqa: E501

        self._schema_version = None
        self._valid = None
        self._reference = None
        self._id = None
        self._type = None
        self._default = None
        self._properties = None
        self._items = None
        self._items_position_validation = None
        self._required = None
        self._all_of = None
        self._any_of = None
        self._one_of = None
        self.__if = None
        self._then = None
        self.__else = None
        self.__not = None
        self._contains = None
        self._property_names = None
        self._enum = None
        self._const = None
        self._unique_items = None
        self._minimum_length = None
        self._maximum_length = None
        self._minimum = None
        self._maximum = None
        self._exclusive_minimum = None
        self._exclusive_maximum = None
        self._minimum_items = None
        self._maximum_items = None
        self._minimum_properties = None
        self._maximum_properties = None
        self._content_encoding = None
        self._content_media_type = None
        self._write_only = None
        self._read_only = None
        self._extension_data = None
        self._title = None
        self._description = None
        self._multiple_of = None
        self._pattern = None
        self._dependencies = None
        self._additional_properties = None
        self._pattern_properties = None
        self._allow_additional_properties = None
        self._additional_items = None
        self._allow_additional_items = None
        self._format = None
        self._validators = None
        self.discriminator = None

        if schema_version is not None:
            self.schema_version = schema_version
        self.valid = valid
        if reference is not None:
            self.reference = reference
        if id is not None:
            self.id = id
        self.type = type
        if default is not None:
            self.default = default
        if properties is not None:
            self.properties = properties
        if items is not None:
            self.items = items
        if items_position_validation is not None:
            self.items_position_validation = items_position_validation
        if required is not None:
            self.required = required
        if all_of is not None:
            self.all_of = all_of
        if any_of is not None:
            self.any_of = any_of
        if one_of is not None:
            self.one_of = one_of
        if _if is not None:
            self._if = _if
        if then is not None:
            self.then = then
        if _else is not None:
            self._else = _else
        if _not is not None:
            self._not = _not
        if contains is not None:
            self.contains = contains
        if property_names is not None:
            self.property_names = property_names
        if enum is not None:
            self.enum = enum
        if const is not None:
            self.const = const
        if unique_items is not None:
            self.unique_items = unique_items
        self.minimum_length = minimum_length
        self.maximum_length = maximum_length
        self.minimum = minimum
        self.maximum = maximum
        if exclusive_minimum is not None:
            self.exclusive_minimum = exclusive_minimum
        if exclusive_maximum is not None:
            self.exclusive_maximum = exclusive_maximum
        self.minimum_items = minimum_items
        self.maximum_items = maximum_items
        self.minimum_properties = minimum_properties
        self.maximum_properties = maximum_properties
        if content_encoding is not None:
            self.content_encoding = content_encoding
        if content_media_type is not None:
            self.content_media_type = content_media_type
        self.write_only = write_only
        self.read_only = read_only
        if extension_data is not None:
            self.extension_data = extension_data
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        self.multiple_of = multiple_of
        if pattern is not None:
            self.pattern = pattern
        if dependencies is not None:
            self.dependencies = dependencies
        if additional_properties is not None:
            self.additional_properties = additional_properties
        if pattern_properties is not None:
            self.pattern_properties = pattern_properties
        if allow_additional_properties is not None:
            self.allow_additional_properties = allow_additional_properties
        if additional_items is not None:
            self.additional_items = additional_items
        if allow_additional_items is not None:
            self.allow_additional_items = allow_additional_items
        if format is not None:
            self.format = format
        if validators is not None:
            self.validators = validators

    @property
    def schema_version(self):
        """Gets the schema_version of this JSchema.  # noqa: E501


        :return: The schema_version of this JSchema.  # noqa: E501
        :rtype: str
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version):
        """Sets the schema_version of this JSchema.


        :param schema_version: The schema_version of this JSchema.  # noqa: E501
        :type: str
        """

        self._schema_version = schema_version

    @property
    def valid(self):
        """Gets the valid of this JSchema.  # noqa: E501


        :return: The valid of this JSchema.  # noqa: E501
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this JSchema.


        :param valid: The valid of this JSchema.  # noqa: E501
        :type: bool
        """

        self._valid = valid

    @property
    def reference(self):
        """Gets the reference of this JSchema.  # noqa: E501


        :return: The reference of this JSchema.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this JSchema.


        :param reference: The reference of this JSchema.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def id(self):
        """Gets the id of this JSchema.  # noqa: E501


        :return: The id of this JSchema.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JSchema.


        :param id: The id of this JSchema.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this JSchema.  # noqa: E501


        :return: The type of this JSchema.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this JSchema.


        :param type: The type of this JSchema.  # noqa: E501
        :type: int
        """
        allowed_values = [None,0, 1, 2, 4, 8, 16, 32, 64]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def default(self):
        """Gets the default of this JSchema.  # noqa: E501


        :return: The default of this JSchema.  # noqa: E501
        :rtype: object
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this JSchema.


        :param default: The default of this JSchema.  # noqa: E501
        :type: object
        """

        self._default = default

    @property
    def properties(self):
        """Gets the properties of this JSchema.  # noqa: E501


        :return: The properties of this JSchema.  # noqa: E501
        :rtype: dict(str, JSchema)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this JSchema.


        :param properties: The properties of this JSchema.  # noqa: E501
        :type: dict(str, JSchema)
        """

        self._properties = properties

    @property
    def items(self):
        """Gets the items of this JSchema.  # noqa: E501


        :return: The items of this JSchema.  # noqa: E501
        :rtype: list[JSchema]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this JSchema.


        :param items: The items of this JSchema.  # noqa: E501
        :type: list[JSchema]
        """

        self._items = items

    @property
    def items_position_validation(self):
        """Gets the items_position_validation of this JSchema.  # noqa: E501


        :return: The items_position_validation of this JSchema.  # noqa: E501
        :rtype: bool
        """
        return self._items_position_validation

    @items_position_validation.setter
    def items_position_validation(self, items_position_validation):
        """Sets the items_position_validation of this JSchema.


        :param items_position_validation: The items_position_validation of this JSchema.  # noqa: E501
        :type: bool
        """

        self._items_position_validation = items_position_validation

    @property
    def required(self):
        """Gets the required of this JSchema.  # noqa: E501


        :return: The required of this JSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this JSchema.


        :param required: The required of this JSchema.  # noqa: E501
        :type: list[str]
        """

        self._required = required

    @property
    def all_of(self):
        """Gets the all_of of this JSchema.  # noqa: E501


        :return: The all_of of this JSchema.  # noqa: E501
        :rtype: list[JSchema]
        """
        return self._all_of

    @all_of.setter
    def all_of(self, all_of):
        """Sets the all_of of this JSchema.


        :param all_of: The all_of of this JSchema.  # noqa: E501
        :type: list[JSchema]
        """

        self._all_of = all_of

    @property
    def any_of(self):
        """Gets the any_of of this JSchema.  # noqa: E501


        :return: The any_of of this JSchema.  # noqa: E501
        :rtype: list[JSchema]
        """
        return self._any_of

    @any_of.setter
    def any_of(self, any_of):
        """Sets the any_of of this JSchema.


        :param any_of: The any_of of this JSchema.  # noqa: E501
        :type: list[JSchema]
        """

        self._any_of = any_of

    @property
    def one_of(self):
        """Gets the one_of of this JSchema.  # noqa: E501


        :return: The one_of of this JSchema.  # noqa: E501
        :rtype: list[JSchema]
        """
        return self._one_of

    @one_of.setter
    def one_of(self, one_of):
        """Sets the one_of of this JSchema.


        :param one_of: The one_of of this JSchema.  # noqa: E501
        :type: list[JSchema]
        """

        self._one_of = one_of

    @property
    def _if(self):
        """Gets the _if of this JSchema.  # noqa: E501


        :return: The _if of this JSchema.  # noqa: E501
        :rtype: JSchema
        """
        return self.__if

    @_if.setter
    def _if(self, _if):
        """Sets the _if of this JSchema.


        :param _if: The _if of this JSchema.  # noqa: E501
        :type: JSchema
        """

        self.__if = _if

    @property
    def then(self):
        """Gets the then of this JSchema.  # noqa: E501


        :return: The then of this JSchema.  # noqa: E501
        :rtype: JSchema
        """
        return self._then

    @then.setter
    def then(self, then):
        """Sets the then of this JSchema.


        :param then: The then of this JSchema.  # noqa: E501
        :type: JSchema
        """

        self._then = then

    @property
    def _else(self):
        """Gets the _else of this JSchema.  # noqa: E501


        :return: The _else of this JSchema.  # noqa: E501
        :rtype: JSchema
        """
        return self.__else

    @_else.setter
    def _else(self, _else):
        """Sets the _else of this JSchema.


        :param _else: The _else of this JSchema.  # noqa: E501
        :type: JSchema
        """

        self.__else = _else

    @property
    def _not(self):
        """Gets the _not of this JSchema.  # noqa: E501


        :return: The _not of this JSchema.  # noqa: E501
        :rtype: JSchema
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this JSchema.


        :param _not: The _not of this JSchema.  # noqa: E501
        :type: JSchema
        """

        self.__not = _not

    @property
    def contains(self):
        """Gets the contains of this JSchema.  # noqa: E501


        :return: The contains of this JSchema.  # noqa: E501
        :rtype: JSchema
        """
        return self._contains

    @contains.setter
    def contains(self, contains):
        """Sets the contains of this JSchema.


        :param contains: The contains of this JSchema.  # noqa: E501
        :type: JSchema
        """

        self._contains = contains

    @property
    def property_names(self):
        """Gets the property_names of this JSchema.  # noqa: E501


        :return: The property_names of this JSchema.  # noqa: E501
        :rtype: JSchema
        """
        return self._property_names

    @property_names.setter
    def property_names(self, property_names):
        """Sets the property_names of this JSchema.


        :param property_names: The property_names of this JSchema.  # noqa: E501
        :type: JSchema
        """

        self._property_names = property_names

    @property
    def enum(self):
        """Gets the enum of this JSchema.  # noqa: E501


        :return: The enum of this JSchema.  # noqa: E501
        :rtype: list[object]
        """
        return self._enum

    @enum.setter
    def enum(self, enum):
        """Sets the enum of this JSchema.


        :param enum: The enum of this JSchema.  # noqa: E501
        :type: list[object]
        """

        self._enum = enum

    @property
    def const(self):
        """Gets the const of this JSchema.  # noqa: E501


        :return: The const of this JSchema.  # noqa: E501
        :rtype: object
        """
        return self._const

    @const.setter
    def const(self, const):
        """Sets the const of this JSchema.


        :param const: The const of this JSchema.  # noqa: E501
        :type: object
        """

        self._const = const

    @property
    def unique_items(self):
        """Gets the unique_items of this JSchema.  # noqa: E501


        :return: The unique_items of this JSchema.  # noqa: E501
        :rtype: bool
        """
        return self._unique_items

    @unique_items.setter
    def unique_items(self, unique_items):
        """Sets the unique_items of this JSchema.


        :param unique_items: The unique_items of this JSchema.  # noqa: E501
        :type: bool
        """

        self._unique_items = unique_items

    @property
    def minimum_length(self):
        """Gets the minimum_length of this JSchema.  # noqa: E501


        :return: The minimum_length of this JSchema.  # noqa: E501
        :rtype: int
        """
        return self._minimum_length

    @minimum_length.setter
    def minimum_length(self, minimum_length):
        """Sets the minimum_length of this JSchema.


        :param minimum_length: The minimum_length of this JSchema.  # noqa: E501
        :type: int
        """

        self._minimum_length = minimum_length

    @property
    def maximum_length(self):
        """Gets the maximum_length of this JSchema.  # noqa: E501


        :return: The maximum_length of this JSchema.  # noqa: E501
        :rtype: int
        """
        return self._maximum_length

    @maximum_length.setter
    def maximum_length(self, maximum_length):
        """Sets the maximum_length of this JSchema.


        :param maximum_length: The maximum_length of this JSchema.  # noqa: E501
        :type: int
        """

        self._maximum_length = maximum_length

    @property
    def minimum(self):
        """Gets the minimum of this JSchema.  # noqa: E501


        :return: The minimum of this JSchema.  # noqa: E501
        :rtype: float
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this JSchema.


        :param minimum: The minimum of this JSchema.  # noqa: E501
        :type: float
        """

        self._minimum = minimum

    @property
    def maximum(self):
        """Gets the maximum of this JSchema.  # noqa: E501


        :return: The maximum of this JSchema.  # noqa: E501
        :rtype: float
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this JSchema.


        :param maximum: The maximum of this JSchema.  # noqa: E501
        :type: float
        """

        self._maximum = maximum

    @property
    def exclusive_minimum(self):
        """Gets the exclusive_minimum of this JSchema.  # noqa: E501


        :return: The exclusive_minimum of this JSchema.  # noqa: E501
        :rtype: bool
        """
        return self._exclusive_minimum

    @exclusive_minimum.setter
    def exclusive_minimum(self, exclusive_minimum):
        """Sets the exclusive_minimum of this JSchema.


        :param exclusive_minimum: The exclusive_minimum of this JSchema.  # noqa: E501
        :type: bool
        """

        self._exclusive_minimum = exclusive_minimum

    @property
    def exclusive_maximum(self):
        """Gets the exclusive_maximum of this JSchema.  # noqa: E501


        :return: The exclusive_maximum of this JSchema.  # noqa: E501
        :rtype: bool
        """
        return self._exclusive_maximum

    @exclusive_maximum.setter
    def exclusive_maximum(self, exclusive_maximum):
        """Sets the exclusive_maximum of this JSchema.


        :param exclusive_maximum: The exclusive_maximum of this JSchema.  # noqa: E501
        :type: bool
        """

        self._exclusive_maximum = exclusive_maximum

    @property
    def minimum_items(self):
        """Gets the minimum_items of this JSchema.  # noqa: E501


        :return: The minimum_items of this JSchema.  # noqa: E501
        :rtype: int
        """
        return self._minimum_items

    @minimum_items.setter
    def minimum_items(self, minimum_items):
        """Sets the minimum_items of this JSchema.


        :param minimum_items: The minimum_items of this JSchema.  # noqa: E501
        :type: int
        """

        self._minimum_items = minimum_items

    @property
    def maximum_items(self):
        """Gets the maximum_items of this JSchema.  # noqa: E501


        :return: The maximum_items of this JSchema.  # noqa: E501
        :rtype: int
        """
        return self._maximum_items

    @maximum_items.setter
    def maximum_items(self, maximum_items):
        """Sets the maximum_items of this JSchema.


        :param maximum_items: The maximum_items of this JSchema.  # noqa: E501
        :type: int
        """

        self._maximum_items = maximum_items

    @property
    def minimum_properties(self):
        """Gets the minimum_properties of this JSchema.  # noqa: E501


        :return: The minimum_properties of this JSchema.  # noqa: E501
        :rtype: int
        """
        return self._minimum_properties

    @minimum_properties.setter
    def minimum_properties(self, minimum_properties):
        """Sets the minimum_properties of this JSchema.


        :param minimum_properties: The minimum_properties of this JSchema.  # noqa: E501
        :type: int
        """

        self._minimum_properties = minimum_properties

    @property
    def maximum_properties(self):
        """Gets the maximum_properties of this JSchema.  # noqa: E501


        :return: The maximum_properties of this JSchema.  # noqa: E501
        :rtype: int
        """
        return self._maximum_properties

    @maximum_properties.setter
    def maximum_properties(self, maximum_properties):
        """Sets the maximum_properties of this JSchema.


        :param maximum_properties: The maximum_properties of this JSchema.  # noqa: E501
        :type: int
        """

        self._maximum_properties = maximum_properties

    @property
    def content_encoding(self):
        """Gets the content_encoding of this JSchema.  # noqa: E501


        :return: The content_encoding of this JSchema.  # noqa: E501
        :rtype: str
        """
        return self._content_encoding

    @content_encoding.setter
    def content_encoding(self, content_encoding):
        """Sets the content_encoding of this JSchema.


        :param content_encoding: The content_encoding of this JSchema.  # noqa: E501
        :type: str
        """

        self._content_encoding = content_encoding

    @property
    def content_media_type(self):
        """Gets the content_media_type of this JSchema.  # noqa: E501


        :return: The content_media_type of this JSchema.  # noqa: E501
        :rtype: str
        """
        return self._content_media_type

    @content_media_type.setter
    def content_media_type(self, content_media_type):
        """Sets the content_media_type of this JSchema.


        :param content_media_type: The content_media_type of this JSchema.  # noqa: E501
        :type: str
        """

        self._content_media_type = content_media_type

    @property
    def write_only(self):
        """Gets the write_only of this JSchema.  # noqa: E501


        :return: The write_only of this JSchema.  # noqa: E501
        :rtype: bool
        """
        return self._write_only

    @write_only.setter
    def write_only(self, write_only):
        """Sets the write_only of this JSchema.


        :param write_only: The write_only of this JSchema.  # noqa: E501
        :type: bool
        """

        self._write_only = write_only

    @property
    def read_only(self):
        """Gets the read_only of this JSchema.  # noqa: E501


        :return: The read_only of this JSchema.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this JSchema.


        :param read_only: The read_only of this JSchema.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def extension_data(self):
        """Gets the extension_data of this JSchema.  # noqa: E501


        :return: The extension_data of this JSchema.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._extension_data

    @extension_data.setter
    def extension_data(self, extension_data):
        """Sets the extension_data of this JSchema.


        :param extension_data: The extension_data of this JSchema.  # noqa: E501
        :type: dict(str, object)
        """

        self._extension_data = extension_data

    @property
    def title(self):
        """Gets the title of this JSchema.  # noqa: E501


        :return: The title of this JSchema.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this JSchema.


        :param title: The title of this JSchema.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this JSchema.  # noqa: E501


        :return: The description of this JSchema.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JSchema.


        :param description: The description of this JSchema.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def multiple_of(self):
        """Gets the multiple_of of this JSchema.  # noqa: E501


        :return: The multiple_of of this JSchema.  # noqa: E501
        :rtype: float
        """
        return self._multiple_of

    @multiple_of.setter
    def multiple_of(self, multiple_of):
        """Sets the multiple_of of this JSchema.


        :param multiple_of: The multiple_of of this JSchema.  # noqa: E501
        :type: float
        """

        self._multiple_of = multiple_of

    @property
    def pattern(self):
        """Gets the pattern of this JSchema.  # noqa: E501


        :return: The pattern of this JSchema.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this JSchema.


        :param pattern: The pattern of this JSchema.  # noqa: E501
        :type: str
        """

        self._pattern = pattern

    @property
    def dependencies(self):
        """Gets the dependencies of this JSchema.  # noqa: E501


        :return: The dependencies of this JSchema.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this JSchema.


        :param dependencies: The dependencies of this JSchema.  # noqa: E501
        :type: dict(str, object)
        """

        self._dependencies = dependencies

    @property
    def additional_properties(self):
        """Gets the additional_properties of this JSchema.  # noqa: E501


        :return: The additional_properties of this JSchema.  # noqa: E501
        :rtype: JSchema
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this JSchema.


        :param additional_properties: The additional_properties of this JSchema.  # noqa: E501
        :type: JSchema
        """

        self._additional_properties = additional_properties

    @property
    def pattern_properties(self):
        """Gets the pattern_properties of this JSchema.  # noqa: E501


        :return: The pattern_properties of this JSchema.  # noqa: E501
        :rtype: dict(str, JSchema)
        """
        return self._pattern_properties

    @pattern_properties.setter
    def pattern_properties(self, pattern_properties):
        """Sets the pattern_properties of this JSchema.


        :param pattern_properties: The pattern_properties of this JSchema.  # noqa: E501
        :type: dict(str, JSchema)
        """

        self._pattern_properties = pattern_properties

    @property
    def allow_additional_properties(self):
        """Gets the allow_additional_properties of this JSchema.  # noqa: E501


        :return: The allow_additional_properties of this JSchema.  # noqa: E501
        :rtype: bool
        """
        return self._allow_additional_properties

    @allow_additional_properties.setter
    def allow_additional_properties(self, allow_additional_properties):
        """Sets the allow_additional_properties of this JSchema.


        :param allow_additional_properties: The allow_additional_properties of this JSchema.  # noqa: E501
        :type: bool
        """

        self._allow_additional_properties = allow_additional_properties

    @property
    def additional_items(self):
        """Gets the additional_items of this JSchema.  # noqa: E501


        :return: The additional_items of this JSchema.  # noqa: E501
        :rtype: JSchema
        """
        return self._additional_items

    @additional_items.setter
    def additional_items(self, additional_items):
        """Sets the additional_items of this JSchema.


        :param additional_items: The additional_items of this JSchema.  # noqa: E501
        :type: JSchema
        """

        self._additional_items = additional_items

    @property
    def allow_additional_items(self):
        """Gets the allow_additional_items of this JSchema.  # noqa: E501


        :return: The allow_additional_items of this JSchema.  # noqa: E501
        :rtype: bool
        """
        return self._allow_additional_items

    @allow_additional_items.setter
    def allow_additional_items(self, allow_additional_items):
        """Sets the allow_additional_items of this JSchema.


        :param allow_additional_items: The allow_additional_items of this JSchema.  # noqa: E501
        :type: bool
        """

        self._allow_additional_items = allow_additional_items

    @property
    def format(self):
        """Gets the format of this JSchema.  # noqa: E501


        :return: The format of this JSchema.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this JSchema.


        :param format: The format of this JSchema.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def validators(self):
        """Gets the validators of this JSchema.  # noqa: E501


        :return: The validators of this JSchema.  # noqa: E501
        :rtype: list[object]
        """
        return self._validators

    @validators.setter
    def validators(self, validators):
        """Sets the validators of this JSchema.


        :param validators: The validators of this JSchema.  # noqa: E501
        :type: list[object]
        """

        self._validators = validators

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
