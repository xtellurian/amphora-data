
steps:
- script: |
    set +e
    IMAGE="webapp:$BUILD"
    if [[ "$(docker images -q $IMAGE 2> /dev/null)" != "" ]]; then
      echo $IMAGE exists!
      mkdir -p $(Build.ArtifactStagingDirectory)/webapp
      docker save $IMAGE -o $(Build.ArtifactStagingDirectory)/webapp/image.tar
      echo "##vso[task.setvariable variable=webappimage]true"
    else
      echo $IMAGE does NOT exist!
    fi

    IMAGE="builder:latest"
    if [[ "$(docker images -q $IMAGE 2> /dev/null)" != "" ]]; then
      echo $IMAGE exists!
      mkdir -p $(Build.ArtifactStagingDirectory)/builder
      docker save $IMAGE -o $(Build.ArtifactStagingDirectory)/builder/image.tar
      echo "##vso[task.setvariable variable=builderimage]true"
    else
      echo $IMAGE does NOT exist!
    fi
  displayName: Save Docker Images to file
  env:
    BUILD: $(Build.BuildNumber)

# Publish build artifacts to Azure Pipelines or a Windows file share
- task: PublishBuildArtifacts@1
  displayName: Save WebApp Image
  condition: and(succeeded(), eq(variables['webappimage'], 'true'))
  inputs:
    pathtoPublish: $(Build.ArtifactStagingDirectory)/webapp/image.tar
    artifactName: webapp 
    #publishLocation: 'Container' # Options: container, filePath
    #targetPath: # Required when publishLocation == FilePath
    #parallel: false # Optional
    #parallelCount: # Optional
    #fileCopyOptions: #Optional

# Publish build artifacts to Azure Pipelines or a Windows file share
- task: PublishBuildArtifacts@1
  displayName: Save Builder Image
  condition: and(succeeded(), eq(variables['builderimage'], 'true'))
  inputs:
    pathtoPublish: $(Build.ArtifactStagingDirectory)/builder/image.tar
    artifactName: builder 
    #publishLocation: 'Container' # Options: container, filePath
    #targetPath: # Required when publishLocation == FilePath
    #parallel: false # Optional
    #parallelCount: # Optional
    #fileCopyOptions: #Optional
