parameters:
  jobName: 'apps'

jobs:
- job: ${{ parameters.jobName }}
  dependsOn: infrastructure
  strategy:
    matrix:
      InMemory:
        PersistentStores: ''
        disableKv: 'true'
      Persistent:
        PersistentStores: 'true'
        disableKv: ''
    maxParallel: 2
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-latest'

  variables:
    - group: AzureDeploySP
    - group: Pulumi xtellurian
    - name: buildConfiguration
      value: 'Release'
    - name: testImageName
      value: 'builder'

  steps:
    - template: install.pulumi.steps.yaml
    - script: |
        export PATH=$PATH:$HOME/.pulumi/bin
        pushd infra
        . pulumi-stack.sh
        export kvUri=$(pulumi stack output kvUri)
        echo PersistentStores - $(PersistentStores)
        echo kvUri - "$kvUri"
        if [ ! -z $(PersistentStores) ] && [ -z $kvUri ] ;
          then
                echo "PersistentStores is set, with no kvUri. Exiting with error"
                exit 1
          fi
      displayName: Check params set correctly
      env:
        STACK: $(stack)
        PULUMI_ACCESS_TOKEN: $(PULUMI_ACCESS_TOKEN)

    # required to access KV in testing
    - script: az login --service-principal -u $NAME -p $PASSWORD --tenant $TENANT
      displayName: Az Login
      env: 
        NAME: $(name)
        PASSWORD: $(password)
        TENANT: $(tenant)

    # required to access KV in testing
    - script: |
        export PATH=$PATH:$HOME/.pulumi/bin
        pushd infra
        . pulumi-stack.sh
        export acrName=$(pulumi stack output acrName)
        popd
        pushd apps
        az acr login -n $acrName
        docker pull $acrName.azurecr.io/$IMAGE:latest
        docker pull $acrName.azurecr.io/$IMAGE:$BUILD
        if [[ "$(docker images -q $acrName.azurecr.io/$IMAGE:$BUILD 2> /dev/null)" == "" ]]; then
          echo "Building Docker Image"
          docker build --target builder --cache-from $acrName.azurecr.io/$IMAGE:latest -t $acrName.azurecr.io/$IMAGE:latest -t $acrName.azurecr.io/$IMAGE:$BUILD -f Dockerfile $CONTEXT
          docker push $acrName.azurecr.io/$IMAGE:latest
          docker push $acrName.azurecr.io/$IMAGE:$BUILD
        fi
      displayName: Create Test Candidate Container
      env: 
        IMAGE: $(testImageName)
        BUILD: $(Build.BuildNumber)
        PULUMI_ACCESS_TOKEN: $(PULUMI_ACCESS_TOKEN)
        CONTEXT: $(Build.SourcesDirectory)/apps

    - script: |
        export PATH=$PATH:$HOME/.pulumi/bin
        pushd infra
        . pulumi-stack.sh
        export acrName=$(pulumi stack output acrName)
        export kvUri=$(pulumi stack output kvUri)
        popd
        pushd apps
        docker pull $acrName.azurecr.io/$IMAGE:$BUILD
        docker run -v `pwd`:/output -v ~/.azure/:/.azure/ -e kvUri=$kvUri -e PersistentStores=$PersistentStores -e disableKv=$disableKv -e DGML_PATH=/output/Entities.dgml $acrName.azurecr.io/$IMAGE:$BUILD
        cp Entities.dgml $(Build.ArtifactStagingDirectory)
      displayName: Run Tests
      env:
        IMAGE: $(testImageName)
        BUILD: $(Build.BuildNumber)
        PersistentStores: $(PersistentStores)
        disableKv: $(disableKv)
        PULUMI_ACCESS_TOKEN: $(PULUMI_ACCESS_TOKEN)

    - task: PublishTestResults@2
      condition: always() 
      inputs:
        testResultsFormat: 'xUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
        testRunner: VSTest
        testResultsFiles: '$(Build.SourcesDirectory)/apps/TestOutput.xml'

    - task: PublishCodeCoverageResults@1
      displayName: Publish Code Coverage Report
      inputs:
        summaryFileLocation: $(Build.SourcesDirectory)/apps/coverage.cobertura.xml
        codecoverageTool: cobertura

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)
        artifactName: 'dgml' 
        publishLocation: 'Container' # Options: container, filePath

- job: dgml
  dependsOn: ${{ parameters.jobName }}
  displayName: Publish DGML
  pool:
    vmImage: 'windows-latest'
  steps:
    - task: DownloadBuildArtifacts@0
      displayName: Download DGML Artifact
      inputs:
        buildType: 'current' # Options: current, specific
        artifactName: dgml
        downloadPath: '$(System.ArtifactsDirectory)' 
    - script: |
        cd apps/test
        dotnet add package DgmlImage --version 1.0.0.1
        DgmlImage -format png -out $(Build.ArtifactStagingDirectory) $(System.ArtifactsDirectory)/dgml/Entities.dgml
      displayName: Convert to Image
    - task: PublishBuildArtifacts@1
      displayName: Publish Image
      inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)
        artifactName: 'dgml-image' 
        publishLocation: 'Container' # Options: container, filePath


