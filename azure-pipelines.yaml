trigger:
  branches:
    include:
    - master
    - develop

jobs:
- job: infrastructure
  # condition: and(eq(variables['Build.Reason'], 'Manual'), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  pool:
    vmImage: 'ubuntu-latest'
  variables:
  - group: Pulumi xtellurian

  steps:
    - script: |
        if [ "$(action)" == "up" ] || [ "$(action)" == "preview" ] || [ "$(action)" == "destroy" ]; then
            echo "$(action) is a valid Pulumi action"
        else
            echo "Action $(action) is invalid. Choose 'up' or 'destroy' "
        fi
      displayName: Check pulumi action is valid

    - script: |
        chmod +x ./infra/*.sh
        ./infra/setup.sh
      displayName: 'Install pulumi'

    - task: AzureCLI@1
      name: pulumi
      env:
        PULUMI_ACCESS_TOKEN: $(PULUMI_ACCESS_TOKEN)
      inputs:
        azureSubscription: amphoradata1
        scriptLocation: 'scriptPath' # Options: inlineScript, scriptPath
        scriptPath: ./infra/run-pulumi.sh # Required when scriptLocation == ScriptPath
        #addSpnToEnvironment: false # Optional
        #useGlobalConfig: false # Optional
        #failOnStandardError: false # Optional

- job: apps
  dependsOn: infrastructure
  strategy:
    matrix:
      InMemory:
        PersistentStores: ''
        kvUri: ''
      Persistent:
        PersistentStores: 'true'
        kvUri: $[ dependencies.infrastructure.outputs['pulumi.kvUri'] ]
    maxParallel: 2
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-latest'

  variables:
    imageName: api
    imageTag: latest
    buildConfiguration: 'Release'

  steps:

  - script: |
      if [ ! -z $(PersistentStores) ] && [ -z $(kvUri) ] ;
        then
              echo "PersistentStores is set, with no kvUri. Exiting with error"
              exit 1
        fi
    displayName: Check params set correctly

  - script: dotnet build --configuration $(buildConfiguration)
    workingDirectory: apps
    displayName: 'dotnet build $(buildConfiguration)'

  - script: dotnet test  --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura apps.sln
    workingDirectory: apps
    displayName: dotnet test
    env:
      ASPNETCORE_kvUri: $(kvUri)
      ASPNETCORE_PersistentStores: $(PersistentStores)

  - task: PublishTestResults@2
    condition: always() 
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'

  - task: PublishCodeCoverageResults@1
    displayName: Publish Code Coverage Report
    inputs:
      summaryFileLocation: $(Build.SourcesDirectory)/apps/test/coverage.cobertura.xml
      codecoverageTool: cobertura

  - script: docker build .
    workingDirectory: apps
    displayName: Build docker image