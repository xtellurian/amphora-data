trigger:
  branches:
    include:
    - master
    - develop

jobs:

##################################################################
#           Deploy Infrastructure
##################################################################

- job: infrastructure
  # condition: and(eq(variables['Build.Reason'], 'Manual'), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  pool:
    vmImage: 'ubuntu-latest'
  variables:
  - group: Pulumi xtellurian
  - group: AzureDeploySP

  steps:
    - script: |
        chmod +x ./infra/*.sh
        ./infra/setup.sh
        ./infra/pulumi-up.sh
      displayName: 'Install pulumi & run pulumi up'
      name: pulumi
      env:
        PULUMI_ACCESS_TOKEN: $(PULUMI_ACCESS_TOKEN)
        ARM_CLIENT_ID: $(appId)
        ARM_CLIENT_SECRET: $(password)
        ARM_SUBSCRIPTION_ID: $(subscription)
        ARM_TENANT_ID: $(tenant)

    - script: |
        echo $kvUri
        echo "$(pulumi.kvUri)"
        echo $pulumiStack
      displayName: echo the vars
      env: 
        kvUri: $(pulumi.kvUri)
        pulumiStack: $(pulumi.pulumiStack)


##################################################################
#           Build Apps
##################################################################

- job: apps
  dependsOn: infrastructure
  strategy:
    matrix:
      InMemory:
        PersistentStores: ''
      Persistent:
        PersistentStores: 'true'
    maxParallel: 2
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-latest'

  variables:
    imageName: api
    imageTag: latest
    buildConfiguration: 'Release'
    kvUri: $[ dependencies.infrastructure.outputs['pulumi.kvUri'] ]

  steps:
  - script: |
      echo PersistentStores - $(PersistentStores)
      echo kvUri - "$(kvUri)"
      if [ ! -z $(PersistentStores) ] && [ -z $(kvUri) ] ;
        then
              echo "PersistentStores is set, with no kvUri. Exiting with error"
              exit 1
        fi
    displayName: Check params set correctly

  - script: dotnet build --configuration $(buildConfiguration)
    workingDirectory: apps
    displayName: 'dotnet build $(buildConfiguration)'

  - script: dotnet test  --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura apps.sln
    condition: ne(variables['build.sourceBranch'], 'refs/heads/master')
    workingDirectory: apps
    displayName: dotnet test
    env:
      ASPNETCORE_kvUri: $(kvUri)
      ASPNETCORE_PersistentStores: $(PersistentStores)

  - task: PublishTestResults@2
    condition: always() 
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'

  - task: PublishCodeCoverageResults@1
    displayName: Publish Code Coverage Report
    inputs:
      summaryFileLocation: $(Build.SourcesDirectory)/apps/test/coverage.cobertura.xml
      codecoverageTool: cobertura

  - script: docker build .
    workingDirectory: apps
    displayName: Build docker image


##################################################################
#           Destroy Instrastructure
##################################################################

# - job: destroyInfra
#   condition: always()
#   pool:
#     vmImage: 'ubuntu-latest'
#   dependsOn: infrastructure
#   variables:
#   - group: Pulumi xtellurian
#   - group: AzureDeploySP
#   - name: stack
#     value: $[ dependencies.infrastructure.outputs['pulumi.pulumiStack'] ]

#   steps:
#     - script: |
#         chmod +x ./infra/*.sh
#         ./infra/setup.sh
#         ./infra/pulumi-destroy.sh
#       displayName: 'Install pulumi & run pulumi up'
#       env:
#         PULUMI_ACCESS_TOKEN: $(PULUMI_ACCESS_TOKEN)
#         ARM_CLIENT_ID: $(appId)
#         ARM_CLIENT_SECRET: $(password)
#         ARM_SUBSCRIPTION_ID: $(subscription)
#         ARM_TENANT_ID: $(tenant)
#         STACK: $(stack)

#     - script: echo $(pulumi.kvUri)
#       displayName: echo the var