trigger:
  branches:
    include:
    - master
    - develop

jobs:

##################################################################
#           Deploy Infrastructure
##################################################################

- job: infrastructure
  # condition: and(eq(variables['Build.Reason'], 'Manual'), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  pool:
    vmImage: 'ubuntu-latest'
  variables:
  - group: Pulumi xtellurian
  - group: AzureDeploySP

  steps:
    - script: |
        chmod +x ./infra/*.sh
        ./infra/setup.sh
        ./infra/pulumi-up.sh
      displayName: 'Install pulumi & run pulumi up'
      name: pulumi
      env:
        PULUMI_ACCESS_TOKEN: $(PULUMI_ACCESS_TOKEN)
        ARM_CLIENT_ID: $(appId)
        ARM_CLIENT_SECRET: $(password)
        ARM_SUBSCRIPTION_ID: $(subscription)
        ARM_TENANT_ID: $(tenant)

    - script: |
        echo "$appUrl"
        echo "$kvUri"
        echo "$pulumiStack"
        echo "$webAppResourceId"
      displayName: Important Variables
      env: 
        kvUri: $(pulumi.kvUri)
        pulumiStack: $(pulumi.pulumiStack)
        appUrl: $(pulumi.appUrl)
        webAppResourceId: $(pulumi.webAppResourceId)


##################################################################
#           Build Apps
##################################################################

- job: apps
  dependsOn: infrastructure
  strategy:
    matrix:
      InMemory:
        PersistentStores: ''
      Persistent:
        PersistentStores: 'true'
    maxParallel: 2
  condition: succeeded()
  pool:
    vmImage: 'ubuntu-latest'

  variables:
    - group: AzureDeploySP
    - name: buildConfiguration
      value: 'Release'
    - name: kvUri
      value: $[ dependencies.infrastructure.outputs['pulumi.kvUri'] ]

  steps:
  - script: |
      echo PersistentStores - $(PersistentStores)
      echo kvUri - "$(kvUri)"
      if [ ! -z $(PersistentStores) ] && [ -z $(kvUri) ] ;
        then
              echo "PersistentStores is set, with no kvUri. Exiting with error"
              exit 1
        fi
    displayName: Check params set correctly

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk v 2.2.300'
    inputs:
      packageType: sdk
      version: 2.2.300
      installationPath: $(Agent.ToolsDirectory)/dotnet

  # required to access KV in testing
  - script: az login --service-principal -u $NAME -p $PASSWORD --tenant $TENANT
    displayName: Az Login
    env: 
      NAME: $(name)
      PASSWORD: $(password)
      TENANT: $(tenant)

  - script: dotnet build --configuration $(buildConfiguration)
    workingDirectory: apps
    displayName: 'dotnet build $(buildConfiguration)'

  - script: dotnet test  --logger trx /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura apps.sln
    workingDirectory: apps
    displayName: dotnet test
    env:
      ASPNETCORE_kvUri: $(kvUri)
      ASPNETCORE_PersistentStores: $(PersistentStores)

  - task: PublishTestResults@2
    condition: always() 
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'

  - task: PublishCodeCoverageResults@1
    displayName: Publish Code Coverage Report
    inputs:
      summaryFileLocation: $(Build.SourcesDirectory)/apps/test/coverage.cobertura.xml
      codecoverageTool: cobertura


- job: deploy
  dependsOn: 
    - infrastructure
    - apps
  pool:
    vmImage: 'ubuntu-latest'

  variables:
  - group: AzureDeploySP
  - name: acrName
    value: $[ dependencies.infrastructure.outputs['pulumi.acrName'] ]
  - name: webAppResourceId
    value: $[ dependencies.infrastructure.outputs['pulumi.webAppResourceId'] ]

  steps:

  - script: az login --service-principal -u $NAME -p $PASSWORD --tenant $TENANT
    displayName: Az Login
    env: 
      NAME: $(name)
      PASSWORD: $(password)
      TENANT: $(tenant)

  - script: |
      az acr login -n $ACR_NAME
      docker build -t $IMAGE:latest -t $IMAGE:$GITHASH -t $IMAGE:$BUILD --build-arg gitHash=$GITHASH $CONTEXT
      docker push $IMAGE:latest
      docker push $IMAGE:$GITHASH
      docker push $IMAGE:$BUILD 
      echo "Setting CI for web app"
      WEBHOOKURI=$(az webapp deployment container config --enable-cd true --ids "$WEBAPPID" --output tsv --query CI_CD_URL)
      echo "Webhook is $WEBHOOKURI"
      az acr webhook create -n WebAppCD -r $ACR_NAME --scope webapp:latest --actions push delete --uri $WEBHOOKURI
    displayName: Build and Push Docker Image
    env:
      ACR_NAME: $(acrName)
      CONTEXT: $(Build.SourcesDirectory)/apps
      IMAGE: $(acrName).azurecr.io/webapp
      GITHASH: $(Build.SourceVersion)
      BUILD: $(Build.SourceBranchName)-$(Build.BuildNumber)
      WEBAPPID: $(webAppResourceId)


##################################################################
#           Destroy Instrastructure
##################################################################

# - job: destroyInfra
#   condition: always()
#   pool:
#     vmImage: 'ubuntu-latest'
#   dependsOn: infrastructure
#   variables:
#   - group: Pulumi xtellurian
#   - group: AzureDeploySP
#   - name: stack
#     value: $[ dependencies.infrastructure.outputs['pulumi.pulumiStack'] ]

#   steps:
#     - script: |
#         chmod +x ./infra/*.sh
#         ./infra/setup.sh
#         ./infra/pulumi-destroy.sh
#       displayName: 'Install pulumi & run pulumi up'
#       env:
#         PULUMI_ACCESS_TOKEN: $(PULUMI_ACCESS_TOKEN)
#         ARM_CLIENT_ID: $(appId)
#         ARM_CLIENT_SECRET: $(password)
#         ARM_SUBSCRIPTION_ID: $(subscription)
#         ARM_TENANT_ID: $(tenant)
#         STACK: $(stack)

#     - script: echo $(pulumi.kvUri)
#       displayName: echo the var